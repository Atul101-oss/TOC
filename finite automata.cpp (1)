//Design a Finite Automata (FA) that accepts all strings over S={0, 1} having either exactly two 1's or 
//exactly three 1's, not more nor less. Write a program to simulate this FA.

#include<iostream>
using namespace std;

class finiteAutomata{
    private:
    int index=0;
    const int n = sizeof(word)/sizeof(word[0]);
    string word;
    public:
    finiteAutomata(const string& word) : word(word){}
    
    int state0(){}
    int state1(){}
    int state2(){}
    int state3(){}
    int dead(){}

    bool isValid(){return (state0()==2 || state0()==3);}


int state0(const string& word, int& index, const int& n){
    if(index<=n){
    if (word[index]==1){state1(word,index,n);}
    else if (word[index]==0){state0(word,index,n);}
    else {dead();}
    }else{return 0;}
    index++;
}
           
int state1(const string& word, int index, const int& n){
    if(index<=n){
    if (word[index]==1){state2(word,index,n);}
    else if (word[index]==0){state1(word,index,n);}
    else {dead();}
    }else{return 1;}
    index++;
}
        
int state2(const string& word, int index, const int& n){
    if(index<=n){
    if (word[index]==1){state3(word,index,n);}
    else if (word[index]==0){state2(word,index,n);}
    else {dead();}
    }else{return 2;}
    index++;
}
   
int state3(const string& word, int index, const int& n){
    if(index<=n){
    if (word[index]==1){dead();}
    else if (word[index]==0){state3(word,index,n);}
    else {dead();}
    }else{return 3;}
    index++;
}

int dead(){return -1;}
};
            
int main(){
    string word;
    cout << "Enter a string to check: "; cin >> word;
    finiteAutomata FA(word);
    cout << FA.isValid() << endl;
    return 0;
    }